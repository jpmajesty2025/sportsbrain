name: CI/CD Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: sportsbrain
          POSTGRES_PASSWORD: password
          POSTGRES_DB: sportsbrain_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting
      working-directory: ./backend
      run: |
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run type checking
      working-directory: ./backend
      run: mypy app --ignore-missing-imports

    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://sportsbrain:password@localhost:5432/sportsbrain_test
        TEST_DATABASE_URL: postgresql://sportsbrain:password@localhost:5432/sportsbrain_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
      run: pytest --cov=app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint --if-present

    - name: Run type checking
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false --passWithNoTests

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend

  build-and-push:
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.railway
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/sportsbrain-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.railway
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/sportsbrain-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python for migrations
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install backend dependencies for migration
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install alembic psycopg2-binary sqlalchemy pydantic pydantic-settings python-dotenv

    - name: Install Railway CLI
      run: npm install -g @railway/cli

    - name: Run database migrations and deploy backend
      working-directory: ./backend
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        DATABASE_URL: ${{ secrets.DATABASE_PUBLIC_URL }}
      run: |
        # Run Alembic migrations against Railway database (public URL)
        alembic upgrade head
        
        # Deploy backend with Railway token
        railway up --service sportsbrain

    - name: Deploy Frontend to Railway
      working-directory: ./frontend
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        # Deploy frontend with Railway token
        railway up --service ideal-gentleness